<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Fluent="clr-namespace:Fluent">
  <Style x:Key="RibbonDropDownButtonStyle" TargetType="{x:Type Fluent:DropDownButton}">
    <Setter Property="Template" Value="{DynamicResource RibbonDropDownButtonControlTemplate}"/>
    <Setter Property="Height" Value="66"/>
    <Setter Property="Width" Value="Auto"/>
    <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}"/>
    <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}"/>
    <Setter Property="Foreground" Value="{DynamicResource DefaultFontBrush}"/>
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}"/>
    <Style.Triggers>
      <Trigger Property="Fluent:RibbonControl.Size" Value="Large">
        <Setter Property="Height" Value="66"/>
      </Trigger>
      <Trigger Property="Fluent:RibbonControl.Size" Value="Middle">
        <Setter Property="Height" Value="22"/>
      </Trigger>
      <Trigger Property="Fluent:RibbonControl.Size" Value="Small">
        <Setter Property="Height" Value="22"/>
        <Setter Property="Width" Value="22"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="RibbonDropDownButtonControlTemplate" TargetType="{x:Type Fluent:DropDownButton}">
    <Border x:Name="border" BorderThickness="1" CornerRadius="2" Background="{DynamicResource TransparentBrush}" BorderBrush="{DynamicResource TransparentBrush}" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
      <Border x:Name="border1" Height="Auto" BorderBrush="{DynamicResource TransparentBrush}" BorderThickness="1" CornerRadius="2" Background="{DynamicResource TransparentBrush}">
        <StackPanel x:Name="stackPanel" Width="Auto" Orientation="Vertical">
          <Image x:Name="iconImage" HorizontalAlignment="Center" Height="32" Stretch="None" VerticalAlignment="Center" Source="{TemplateBinding LargeIcon}" Width="32" Margin="2"/>
          <Fluent:ControlLabel x:Name="controlLabel" Text="{TemplateBinding Text}" Style="{DynamicResource ControlLabelStyle}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="2,-2,2,2" HasGlyph="{TemplateBinding HasTriangle}"/>
          <Fluent:ExtendedPopup x:Name="PART_Popup" PlacementTarget="{Binding ElementName=border, Mode=OneWay}" AllowsTransparency="True" VerticalOffset="-1" HorizontalOffset="0">
          	<Grid Width="Auto" Height="Auto" Margin="30,20">
          		<Grid.ColumnDefinitions>
          			<ColumnDefinition Width="*"/>
          			<ColumnDefinition Width="5"/>
          		</Grid.ColumnDefinitions>
          		<Grid.RowDefinitions>
          			<RowDefinition Height="*"/>
          			<RowDefinition Height="5"/>
          		</Grid.RowDefinitions>
          		<Rectangle Stroke="{x:Null}" StrokeThickness="0" HorizontalAlignment="Stretch" Margin="11,-1,1,0" VerticalAlignment="Stretch" Height="Auto" Grid.Column="0" Grid.Row="1" Grid.RowSpan="1">
          			<Rectangle.Fill>
          				<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" MappingMode="RelativeToBoundingBox">
          					<GradientStop Color="#7F000000" Offset="0"/>
          					<GradientStop Offset="1"/>
          				</LinearGradientBrush>
          			</Rectangle.Fill>
          		</Rectangle>
          		<Rectangle Stroke="{x:Null}" StrokeThickness="0" HorizontalAlignment="Stretch" Margin="-1,11,0,1" VerticalAlignment="Stretch" Height="Auto" Grid.Column="1" Grid.Row="0" Grid.RowSpan="1">
          			<Rectangle.Fill>
          				<LinearGradientBrush EndPoint="1.002,0" MappingMode="RelativeToBoundingBox">
          					<GradientStop Color="#7F000000" Offset="0"/>
          					<GradientStop Offset="1"/>
          				</LinearGradientBrush>
          			</Rectangle.Fill>
          		</Rectangle>
          		<Rectangle Stroke="{x:Null}" StrokeThickness="0" HorizontalAlignment="Stretch" Margin="-1,-1,0,0" VerticalAlignment="Stretch" Height="Auto" Grid.Column="1" Grid.Row="1" Grid.RowSpan="1">
          			<Rectangle.Fill>
          				<RadialGradientBrush Center="-0.003,0.011" GradientOrigin="-0.003,0.011" RadiusX="1.006" RadiusY="1">
          					<GradientStop Color="#7F000000" Offset="0.002"/>
          					<GradientStop Offset="1"/>
          				</RadialGradientBrush>
          			</Rectangle.Fill>
          		</Rectangle>
          		<Rectangle Stroke="{x:Null}" StrokeThickness="0" HorizontalAlignment="Stretch" Margin="-1,5,0,0" VerticalAlignment="Top" Height="6" Grid.Column="1" Grid.Row="0" Grid.RowSpan="1">
          			<Rectangle.Fill>
          				<RadialGradientBrush Center="-0.01,1.004" GradientOrigin="-0.01,1.004" RadiusX="1.006" RadiusY="1">
          					<GradientStop Color="#7F000000" Offset="0.002"/>
          					<GradientStop Offset="1"/>
          				</RadialGradientBrush>
          			</Rectangle.Fill>
          		</Rectangle>
          		<Rectangle Stroke="{x:Null}" StrokeThickness="0" HorizontalAlignment="Left" Margin="5,-1,0,0" VerticalAlignment="Stretch" Height="Auto" Grid.Column="0" Grid.Row="1" Grid.RowSpan="1" Width="6">
          			<Rectangle.Fill>
          				<RadialGradientBrush Center="1.003,-0.006" GradientOrigin="1.003,-0.006" RadiusX="1.006" RadiusY="1">
          					<GradientStop Color="#7F000000" Offset="0.002"/>
          					<GradientStop Offset="1"/>
          				</RadialGradientBrush>
          			</Rectangle.Fill>
          		</Rectangle>
          		<ContentPresenter Grid.ColumnSpan="1" ContentSource="PopupContent"/>
          	</Grid>
          </Fluent:ExtendedPopup>
        </StackPanel>
      </Border>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="Fluent:RibbonControl.Size" Value="Small">
        <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal"/>
        <Setter Property="Visibility" TargetName="controlLabel" Value="Collapsed"/>
        <Setter Property="Source" TargetName="iconImage" Value="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="HasTwoLines" TargetName="controlLabel" Value="False"/>
        <Setter Property="Width" TargetName="iconImage" Value="16"/>
        <Setter Property="Height" TargetName="iconImage" Value="16"/>
        <Setter Property="Margin" TargetName="iconImage" Value="2"/>
      </Trigger>
      <Trigger Property="Fluent:RibbonControl.Size" Value="Middle">
        <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal"/>
        <Setter Property="Source" TargetName="iconImage" Value="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="Width" TargetName="stackPanel" Value="Auto"/>
        <Setter Property="VerticalAlignment" TargetName="iconImage" Value="Center"/>
        <Setter Property="HasTwoLines" TargetName="controlLabel" Value="False"/>
        <Setter Property="Margin" TargetName="controlLabel" Value="2,0,2,2"/>
        <Setter Property="VerticalAlignment" TargetName="border" Value="Stretch"/>
        <Setter Property="Width" TargetName="iconImage" Value="16"/>
        <Setter Property="Height" TargetName="iconImage" Value="16"/>
        <Setter Property="Margin" TargetName="iconImage" Value="2"/>
        <Setter Property="VerticalAlignment" TargetName="controlLabel" Value="Top"/>
      </Trigger>
      <Trigger Property="IsOpen" Value="True">
        <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonPressedOuterBorderBrush}"/>
        <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonPressedOuterBackgroundBrush}"/>
        <Setter Property="Background" TargetName="border1" Value="{DynamicResource ButtonPressedInnerBackgroundBrush}"/>
        <Setter Property="BorderBrush" TargetName="border1" Value="{DynamicResource ButtonPressedInnerBorderBrush}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True"/>
          <Condition Property="IsOpen" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"/>
        <Setter Property="Background" TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"/>
        <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"/>
        <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"/>
      </MultiTrigger>
	  <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsFocused" Value="True"/>
          <Condition Property="IsOpen" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"/>
        <Setter Property="Background" TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"/>
        <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"/>
        <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"/>
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>    
</ResourceDictionary>