<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:Fluent="clr-namespace:Fluent" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d">
	<Style x:Key="RibbonButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="Template" Value="{DynamicResource RibbonButtonControlTemplate}"/>
		<Setter Property="Height" Value="66"/>
    <Setter Property="Width" Value="Auto"/>
    <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}"/>
    <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}"/>
    <Setter Property="Foreground" Value="{DynamicResource DefaultFontBrush}"/>
		<Style.Triggers>
      <Trigger Property="Fluent:RibbonControl.Size" Value="Large">
        <Setter Property="Height" Value="66"/>
      </Trigger>
      <Trigger Property="Fluent:RibbonControl.Size" Value="Middle">
        <Setter Property="Height" Value="22"/>
      </Trigger>
      <Trigger Property="Fluent:RibbonControl.Size" Value="Small">
        <Setter Property="Height" Value="22"/>
        <Setter Property="Width" Value="22"/>
      </Trigger>
		</Style.Triggers>
	</Style>
	<ControlTemplate x:Key="RibbonButtonControlTemplate" TargetType="{x:Type Button}">
		<Border x:Name="border" BorderThickness="1" CornerRadius="2" Background="{DynamicResource TransparentBrush}" BorderBrush="{DynamicResource TransparentBrush}" Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Stretch">
			<Border x:Name="border1" Height="Auto" BorderBrush="{DynamicResource TransparentBrush}" BorderThickness="1" CornerRadius="2" Background="{DynamicResource TransparentBrush}">
				<StackPanel x:Name="stackPanel" Width="Auto" Orientation="Vertical">
					<Image x:Name="iconImage" HorizontalAlignment="Center" Height="32" Stretch="None" VerticalAlignment="Center" Source="{Binding Path=(Fluent:RibbonControl.LargeIcon), RelativeSource={RelativeSource TemplatedParent}}" Width="32" Margin="2"/>
					<Fluent:ControlLabel x:Name="controlLabel" Text="{TemplateBinding Content}" Style="{DynamicResource ControlLabelStyle}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="2,-2,2,2"/>
				</StackPanel>
			</Border>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="Fluent:RibbonControl.Size" Value="Small">
				<Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal"/>
				<Setter Property="Visibility" TargetName="controlLabel" Value="Collapsed"/>
				<Setter Property="Source" TargetName="iconImage" Value="{Binding Path=(Fluent:RibbonControl.SmallIcon), RelativeSource={RelativeSource TemplatedParent}}"/>
				<Setter Property="HasTwoLines" TargetName="controlLabel" Value="False"/>
				<Setter Property="Width" TargetName="iconImage" Value="16"/>
				<Setter Property="Height" TargetName="iconImage" Value="16"/>
				<Setter Property="Margin" TargetName="iconImage" Value="2"/>				
			</Trigger>
			<Trigger Property="Fluent:RibbonControl.Size" Value="Middle">
				<Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal"/>
				<Setter Property="Source" TargetName="iconImage" Value="{Binding Path=(Fluent:RibbonControl.SmallIcon), RelativeSource={RelativeSource TemplatedParent}}"/>
				<Setter Property="Width" TargetName="stackPanel" Value="Auto"/>
				<Setter Property="VerticalAlignment" TargetName="iconImage" Value="Center"/>
				<Setter Property="HasTwoLines" TargetName="controlLabel" Value="False"/>
				<Setter Property="Margin" TargetName="controlLabel" Value="2,0,2,2"/>
				<Setter Property="VerticalAlignment" TargetName="border" Value="Stretch"/>
				<Setter Property="Width" TargetName="iconImage" Value="16"/>
				<Setter Property="Height" TargetName="iconImage" Value="16"/>
				<Setter Property="Margin" TargetName="iconImage" Value="2"/>
				<Setter Property="VerticalAlignment" TargetName="controlLabel" Value="Top"/>			
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonPressedOuterBorderBrush}"/>
				<Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonPressedOuterBackgroundBrush}"/>
				<Setter Property="Background" TargetName="border1" Value="{DynamicResource ButtonPressedInnerBackgroundBrush}"/>
				<Setter Property="BorderBrush" TargetName="border1" Value="{DynamicResource ButtonPressedInnerBorderBrush}"/>
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="True"/>
					<Condition Property="IsPressed" Value="False"/>
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"/>
				<Setter Property="Background" TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"/>
				<Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"/>
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"/>
			</MultiTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
    
</ResourceDictionary>